<?php
/**
 * SocialEngineSolutions
 *
 * @category   Application_Sesevent
 * @package    Sesevent
 * @copyright  Copyright 2015-2016 SocialEngineSolutions
 * @license    http://www.socialenginesolutions.com/license/
 * @version    $Id: Core.php 2016-07-26 00:00:00 SocialEngineSolutions $
 * @author     SocialEngineSolutions
 */
class Sesevent_Api_Core extends Core_Api_Abstract {

  public function checkPrivacySetting($id) {

    $item = Engine_Api::_()->getItem('sesevent_event', $id);
    $viewer = Engine_Api::_()->user()->getViewer();
    $viewerId = $viewer->getIdentity();

    if ($viewerId)
      $level_id = $viewer->level_id;
    else
      $level_id = 5;

    $levels = $item->levels;
    $member_level = explode(",",$item->levels); //json_decode($levels);

    if (!empty($member_level) && !empty($item->levels)) {
      if (!in_array($level_id, $member_level))
        return false;
    } else
      return true;


    if ($viewerId) {
      $network_table = Engine_Api::_()->getDbtable('membership', 'network');
      $network_select = $network_table->select('resource_id')->where('user_id = ?', $viewerId);
      $network_id_query = $network_table->fetchAll($network_select);
      $network_id_query_count = count($network_id_query);
      $network_id_array = array();
      for ($i = 0; $i < $network_id_query_count; $i++) {
        $network_id_array[$i] = $network_id_query[$i]['resource_id'];
      }

      if (!empty($network_id_array)) {
        if(!empty($item->networks)) {
        $networks = explode(",",$item->networks); //json_decode($item->networks);

        if (!empty($networks)) {
          if (!array_intersect($network_id_array, $networks))
            return false;
        } else
          return true;
        } else
            return true;
      }
    }
    return true;
  }

	public function getCustomFieldMapData($event) {
    if ($event) {
      $db = Engine_Db_Table::getDefaultAdapter();
      return $db->query("SELECT GROUP_CONCAT(value) AS `valuesMeta`,IFNULL(TRIM(TRAILING ', ' FROM GROUP_CONCAT(DISTINCT(engine4_sesevent_event_fields_options.label) SEPARATOR ', ')),engine4_sesevent_event_fields_values.value) AS `value`, `engine4_sesevent_event_fields_meta`.`label`, `engine4_sesevent_event_fields_meta`.`type` FROM `engine4_sesevent_event_fields_values` LEFT JOIN `engine4_sesevent_event_fields_meta` ON engine4_sesevent_event_fields_meta.field_id = engine4_sesevent_event_fields_values.field_id LEFT JOIN `engine4_sesevent_event_fields_options` ON engine4_sesevent_event_fields_values.value = engine4_sesevent_event_fields_options.option_id AND (`engine4_sesevent_event_fields_meta`.`type` = 'multi_checkbox' OR `engine4_sesevent_event_fields_meta`.`type` ='multiselect' OR `engine4_sesevent_event_fields_meta`.`type` = 'radio'  OR `engine4_sesevent_event_fields_meta`.`type` = 'select') WHERE (engine4_sesevent_event_fields_values.item_id = ".$event->event_id.") AND (engine4_sesevent_event_fields_values.field_id != 1) GROUP BY `engine4_sesevent_event_fields_meta`.`field_id`,`engine4_sesevent_event_fields_options`.`field_id`")->fetchAll();
    }
    return array();
  }
  /**
   * Gets an absolute URL to the page to view this item
   *
   * @return string
  */
  public function getHref($albumId = '', $slug = '') {
    if (is_numeric($albumId)) {
      $slug = $this->getSlug(Engine_Api::_()->getItem('sesevent_album', $albumId)->getTitle());
    }
    $params = array_merge(array(
        'route' => 'sesevent_specific_album',
        'reset' => true,
        'album_id' => $albumId,
        'slug' => $slug,
    ));
    $route = $params['route'];
    $reset = $params['reset'];
    unset($params['route']);
    unset($params['reset']);
    return Zend_Controller_Front::getInstance()->getRouter()
                    ->assemble($params, $route, $reset);
  }
    /**
   * Gets a url slug for this item, based on it's title
   *
   * @return string The slug
   */
  public function getSlug($str = null, $maxstrlen = 245) {
    if (null === $str) {
      $str = $this->getTitle();
    }
    if (strlen($str) > $maxstrlen) {
      $str = Engine_String::substr($str, 0, $maxstrlen);
    }
    $search = array('À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ', 'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ');
    $replace = array('A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o');
    $str = str_replace($search, $replace, $str);
    $str = preg_replace('/([a-z])([A-Z])/', '$1 $2', $str);
    $str = strtolower($str);
    $str = preg_replace('/[^a-z0-9-]+/i', '-', $str);
    $str = preg_replace('/-+/', '-', $str);
    $str = trim($str, '-');
    if (!$str) {
      $str = '-';
    }
    return $str;
  }
  public function dateFormat($date = null,$changetimezone = '',$object = '',$formate = 'M d, Y h:m A') {
		if($changetimezone != '' && $date){
			$date = strtotime($date);
			$oldTz = date_default_timezone_get();
			date_default_timezone_set($object->timezone);
			if($formate == '')
				$dateChange = date('Y-m-d h:i:s',$date);
			else{
				$dateChange = date('M d, Y h:i A',$date);
			}
			date_default_timezone_set($oldTz);
			return $dateChange.' ('.$object->timezone.')';
		}
    if($date){
      return date('M d, Y h:i A', strtotime($date));
    }
  }
	function generateQrCode($data = '',$filename = ''){
		$size = 9;
		$quality = 'H';
		if(!$data)
			return false;
		include_once "qrcode/qrlib.php";
		$PNG_TEMP_DIR = APPLICATION_PATH . DIRECTORY_SEPARATOR . 'public/sesevent_qrcode/';
		//ofcourse we need rights to create temp dir
    if (!file_exists($PNG_TEMP_DIR))
        mkdir($PNG_TEMP_DIR);
		$time = md5(time()).rand(0,10000);
		if($filename == '')
			$filenamePng = $PNG_TEMP_DIR.'qrcode_'.$time.'.png';
		else
			$filenamePng = $PNG_TEMP_DIR.$filename;
    QRcode::png($data, $filenamePng, $quality, $size, 2);
		return ( isset($_SERVER["HTTPS"]) && (strtolower($_SERVER["HTTPS"]) == 'on') ? "https://" : "http://") . $_SERVER['HTTP_HOST'] .Zend_Registry::get('StaticBaseUrl') .'/public/sesevent_qrcode/'.$filename;
	}
  function tagCloudItemCore($fetchtype = '', $params = array()) {
    $tableTagmap = Engine_Api::_()->getDbtable('tagMaps', 'core');
    $tableTagName = $tableTagmap->info('name');
    $tableTag = Engine_Api::_()->getDbtable('tags', 'core');
    $tableMainTagName = $tableTag->info('name');
    $selecttagged_photo = $tableTagmap->select()
            ->from($tableTagName)
            ->setIntegrityCheck(false)
            ->where('tag_type =?', 'core_tag')
            ->joinLeft($tableMainTagName, $tableMainTagName . '.tag_id=' . $tableTagName . '.tag_id', array('text'))
            ->group($tableTagName . '.tag_id');
    if (isset($params['type']))
      $selecttagged_photo->where('resource_type =?', $params['type']);
    $selecttagged_photo->columns(array('itemCount' => ("COUNT($tableTagName.tagmap_id)")));
    if ($fetchtype == '')
      return Zend_Paginator::factory($selecttagged_photo);
    else
      return $tableTagmap->fetchAll($selecttagged_photo);
  }
	//get google calander link
	function getGoogleCalendarLink($event){
		$view = Zend_Registry::isRegistered('Zend_View') ? Zend_Registry::get('Zend_View') : null;
		return '<a href="http://www.google.com/calendar/event?
							action=TEMPLATE
							&text='.urlencode($event->getTitle()).'
							&dates='.(date('Ymd\\THi00\\Z',strtotime($event->starttime))).'/'.(date('Ymd\\THi00\\Z',strtotime($event->endtime))).'
							&details='.urlencode($event->getDescription()).'
							&location='.$event->location.',
              &trp=false
							&sprop=name:",
							target="_blank" title="'.$view->translate("Add to Google Calendar").'"><i class="sesevent_icon_google"></i>'.$view->translate("Google Calender").'</a>';
	}
	//get yahoo calander link
	function getYahooLink($event){
		$view = Zend_Registry::isRegistered('Zend_View') ? Zend_Registry::get('Zend_View') : null;
		$https = _ENGINE_SSL ? 'https://' : 'http://';
    $duration = strtotime($event->endtime) - strtotime($event->starttime);
    $hours = floor($duration/3600);
    $minutes = floor(($duration%3600)/60);
    $duration = (strlen($hours) < 2 ? '0'.$hours : $hours).(strlen($minutes) < 2 ? '0'.$minutes : $minutes);
		return '<a href="http://calendar.yahoo.com/?v=60&
							ST=' .date('Ymd\THis\Z',strtotime($event->starttime)) . '&
							DUR='.$duration.'&
							title='. urlencode($event->getTitle()).'&
							view=d&type=20&
							DESC='.urlencode($event->getDescription()).'&
							URL='.$https.$_SERVER['HTTP_HOST'].$event->getHref().'&
							in_loc=' . $event->location.'"
							target="_blank" title="'.$view->translate("Add to Yahoo Calendar").'"><i class="sesevent_icon_yahoo"></i>'.$view->translate("Yahoo Calendar").'</a>';
	}
	//get MSN calander link
	public function getMSNlink($event){
    $starttime = $event->starttime;
    $endtime = $event->endtime;

    $oldTz = date_default_timezone_get();
    date_default_timezone_set('UTC');
    $starttime = date('Y-m-d H:i:s',$starttime);
    $endtime = date('Y-m-d H:i:s',$endtime);

    $dateStart = date("Ymd",strtotime($starttime));
    $dateEnd = date("Ymd",strtotime($endtime));
    $dateStartTime = date("His",strtotime($starttime));
    $dateEndTime = date("His",strtotime($endtime));
    date_default_timezone_set($oldTz);

		$view = Zend_Registry::isRegistered('Zend_View') ? Zend_Registry::get('Zend_View') : null;
		return '<a href="http://calendar.live.com/calendar/calendar.aspx?&
							dtstart=' . ($dateStart.'T'.($dateStartTime)). '&
							dtend=' .$dateEnd.'T'.($dateEndTime) . '&
							summary=' . urlencode($event->getTitle()) . '&
							rru=addevent&
							description='.urlencode($event->getDescription()).'&location=' . urlencode($event->location).'"
							target="_blank" title="'.$view->translate("Add to MSN Calendar").'"><i class="sesevent_icon_msn"></i>'.$view->translate("MSN Calendar").'</a>';
	}

	//remove incomplete ticket order
	public function removeIncompleteTicketOrder($viewerId = ''){
		if($viewerId){
			$order = Engine_Api::_()->getDbtable('orders', 'sesevent');
			$orderTableName = $order->info('name');
			$select = $order->select()
											->from($orderTableName, "order_id")
											->where('state =?', 'incomplete')
											->where($orderTableName . '.owner_id =?', $viewerId);
			$orderId = $select->query()->fetchColumn();
			if($orderId){
				 $dbGetInsert = Engine_Db_Table::getDefaultAdapter();
				 $dbGetInsert->query('DELETE FROM engine4_sesevent_orderticketdetails WHERE order_id = '.$orderId);
				 $dbGetInsert->query('DELETE FROM engine4_sesevent_ordertickets WHERE order_id = '.$orderId);
				 $dbGetInsert->query('DELETE FROM engine4_sesevent_orders WHERE order_id = '.$orderId);
			}
		}
	}
  //get supported currencies
  public function getSupportedCurrency(){
    if(!empty($_SESSION['ses_multiple_currency']['multipleCurrencyPluginActivated'])){
      return Engine_Api::_()->sesmultiplecurrency()->getSupportedCurrency();
    }else{
      return array();
    }
  }
	public function isMultiCurrencyAvailable(){
		if(!empty($_SESSION['ses_multiple_currency']['multipleCurrencyPluginActivated'])){
      return Engine_Api::_()->sesmultiplecurrency()->isMultiCurrencyAvailable();
    }else{
      return false;
    }
	}
  public function getCurrencySymbolValue($price, $currency = '', $change_rate = '') {
    if(!empty($_SESSION['ses_multiple_currency']['multipleCurrencyPluginActivated'])){
      return Engine_Api::_()->sesmultiplecurrency()->getCurrencySymbolValue($price,$currency,$change_rate);
    }else{
      return false;
    }
  }

  //return price with symbol and change rate param for payment history.
  public function getCurrencyPrice($price = 0, $givenSymbol = '', $change_rate = '') {
		$settings = Engine_Api::_()->getApi('settings', 'core');
    $precisionValue = $settings->getSetting('sesmultiplecurrency.precision', 2);
    $defaultParams['precision'] = $precisionValue;
    if(!empty($_SESSION['ses_multiple_currency']['multipleCurrencyPluginActivated'])){
      return Engine_Api::_()->sesmultiplecurrency()->getCurrencyPrice($price, $givenSymbol, $change_rate);
    }else{
      return Zend_Registry::get('Zend_View')->locale()->toCurrency($price, $givenSymbol, $defaultParams);
    }
	}
  public function getCurrentCurrency(){
		$settings = Engine_Api::_()->getApi('settings', 'core');
    if(!empty($_SESSION['ses_multiple_currency']['multipleCurrencyPluginActivated'])){
      return Engine_Api::_()->sesmultiplecurrency()->getCurrentCurrency();
    }else{
      return $settings->getSetting('payment.currency', 'USD');
    }
  }
  public function defaultCurrency(){
    if(!empty($_SESSION['ses_multiple_currency']['multipleCurrencyPluginActivated'])){
      return Engine_Api::_()->sesmultiplecurrency()->defaultCurrency();
    }else{
      $settings = Engine_Api::_()->getApi('settings', 'core');
      return $settings->getSetting('payment.currency', 'USD');
    }
  }
  public function getCurrenctDateTimeAccordingToTimezone($timezone = '') {
    if (!$timezone)
      return date('Y-m-d H:i:s');
    //conver time zone accrding to event
    $oldTz = date_default_timezone_get();
    date_default_timezone_set($timezone);
    $changeTime = date('Y-m-d H:i:s');
    date_default_timezone_set($oldTz);
    return $changeTime;
  }
  public function purchaseTicketCount($event_id, $ticketId) {
    $orderTicket = Engine_Api::_()->getDbtable('orderTickets', 'sesevent');
    $orderTicketTableName = $orderTicket->info('name');
    $select = $orderTicket->select()
            ->from($orderTicketTableName, "SUM(quantity)")
            ->setIntegrityCheck(false)
            ->where("CASE WHEN state = 'incomplete' THEN creation_date > DATE_SUB(now(), INTERVAL 15 MINUTE) ELSE TRUE  END ")
            ->where("CASE WHEN state = 'pending' THEN creation_date > DATE_SUB(now(), INTERVAL 15 MINUTE) ELSE TRUE END ")
            ->where('state !=?', 'cancelled')
            ->where('state !=?', 'failed')
            ->where('state !=?', 'refund')
            ->where($orderTicketTableName . '.ticket_id =?', $ticketId)
            ->where($orderTicketTableName . '.event_id =?', $event_id)
            ->group($orderTicketTableName . '.ticket_id');
    return $select->query()->fetchColumn();
  }
  public function getIdentityWidget($name, $type, $corePages) {
    $widgetTable = Engine_Api::_()->getDbTable('content', 'core');
    $widgetPages = Engine_Api::_()->getDbTable('pages', 'core')->info('name');
    $identity = $widgetTable->select()
            ->setIntegrityCheck(false)
            ->from($widgetTable, 'content_id')
            ->where($widgetTable->info('name') . '.type = ?', $type)
            ->where($widgetTable->info('name') . '.name = ?', $name)
            ->where($widgetPages . '.name = ?', $corePages)
            ->joinLeft($widgetPages, $widgetPages . '.page_id = ' . $widgetTable->info('name') . '.page_id')
            ->query()
            ->fetchColumn();
    return $identity;
  }
  //Get Event like status
  public function getLikeStatusEvent($event_id = '', $moduleName = '') {
    if ($moduleName == '')
      $moduleName = 'sesevent_event';
    if ($event_id != '') {
      $userId = Engine_Api::_()->user()->getViewer()->getIdentity();
      if ($userId == 0)
        return false;
      $coreLikeTable = Engine_Api::_()->getDbtable('likes', 'core');
      $total_likes = $coreLikeTable->select()
              ->from($coreLikeTable->info('name'), new Zend_Db_Expr('COUNT(like_id) as like_count'))
              ->where('resource_type =?', $moduleName)
              ->where('poster_id =?', $userId)
              ->where('poster_type =?', 'user')
              ->where('	resource_id =?', $event_id)
              ->query()
              ->fetchColumn();
      if ($total_likes > 0)
        return true;
      else
        return false;
    }
    return false;
  }
	function getRandonRagistrationCode($length){
			$az = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
			$azr = rand(0, 51);
			$azs = substr($az, $azr, 10);
			$stamp = hash('sha256', time());
			$mt = hash('sha256', mt_rand(5, 20));
			$alpha = hash('sha256', $azs);
			$hash = str_shuffle($stamp . $mt . $alpha);
			return ucfirst(substr($hash, $azr, $length));
	}
	//randon ticket id generator
	public function generateTicketCode($length = 8,$tableName = 'orders')
	{
			$code = $this->getRandonRagistrationCode($length);
			$checkRegistrationNumber = 1;
			do {
			 	$checkRegistrationNumber =  Engine_Api::_()->getDbtable($tableName, 'sesevent')->checkRegistrationNumber($code);
				if($checkRegistrationNumber){
					$code = $this->getRandonRagistrationCode($length);
				}
			} while ($checkRegistrationNumber != 0);
			return $code;
	}
  public function getColumnName($value) {
		switch ($value) {
			case 'recently created':
			$optionKey = 'creation_date ASC';
			break;
					case 'most viewed':
			$optionKey = 'view_count DESC';
			break;
					case 'most liked':
			$optionKey = 'like_count DESC';
			break;
					case 'most commented':
			$optionKey = 'comment_count DESC';
			break;
					case 'most rated':
			$optionKey = 'rating DESC';
			break;
		  case 'most favourite':
			$optionKey = 'favourite_count DESC';
      break;
      case 'starttime':
			  $optionKey = 'starttime DESC';
			break;
			default:
			$optionKey = $value;
		};
    return $optionKey;
  }
    //get album photo
  function getAlbumPhoto($albumId = '', $photoId = '', $limit = 4) {
    if ($albumId != '') {
      $albums = Engine_Api::_()->getItemTable('sesevent_album');
      $albumTableName = $albums->info('name');
      $photos = Engine_Api::_()->getItemTable('sesevent_photo');
      $photoTableName = $photos->info('name');
      $select = $photos->select()
              ->from($photoTableName)
              ->limit($limit)
              ->where($albumTableName . '.album_id = ?', $albumId)
              ->where($photoTableName . '.photo_id != ?', $photoId)
              ->setIntegrityCheck(false)
              ->joinLeft($albumTableName, $albumTableName . '.album_id = ' . $photoTableName . '.album_id', null);
      if ($limit == 3)
        $select = $select->order('rand()');
      return $photos->fetchAll($select);
    }
  }
    //get photo URL
  public function photoUrlGet($photo_id, $type = null) {
    if (empty($photo_id)) {
      $photoTable = Engine_Api::_()->getItemTable('sesevent_photo');
      $photoInfo = $photoTable->select()
              ->from($photoTable, array('photo_id', 'file_id'))
              ->where('album_id = ?', $this->album_id)
              ->order('order ASC')
              ->limit(1)
              ->query()
              ->fetch();
      if (!empty($photoInfo)) {
        $this->photo_id = $photo_id = $photoInfo['photo_id'];
        $this->save();
        $file_id = $photoInfo['file_id'];
      } else {
        return;
      }
    } else {
      $photoTable = Engine_Api::_()->getItemTable('sesevent_photo');
      $file_id = $photoTable->select()
              ->from($photoTable, 'file_id')
              ->where('photo_id = ?', $photo_id)
              ->query()
              ->fetchColumn();
    }
    if (!$file_id) {
      return;
    }
    $file = Engine_Api::_()->getItemTable('storage_file')->getFile($file_id, $type);
    if (!$file) {
      $file = Engine_Api::_()->getItemTable('storage_file')->getFile($file_id, '');
    }
    return $file->map();
  }
	public function getNextPhoto($album_id = '', $order = '') {
    $table = Engine_Api::_()->getDbTable('photos', 'sesevent');
    $select = $table->select()
            ->where('album_id = ?', $album_id)
            ->where('`order` > ?', $order)
            ->order('order ASC')
            ->limit(1);
    $photo = $table->fetchRow($select);
    if (!$photo) {
      // Get first photo instead
      $select = $table->select()
              ->where('album_id = ?', $album_id)
              ->order('order ASC')
              ->limit(1);
      $photo = $table->fetchRow($select);
    }
    return $photo;
  }
  public function getPreviousPhoto($album_id = '', $order = '') {
    $table = Engine_Api::_()->getDbTable('photos', 'sesevent');
    $select = $table->select()
            ->where('album_id = ?', $album_id)
            ->where('`order` < ?', $order)
            ->order('order DESC')
            ->limit(1);
    $photo = $table->fetchRow($select);
    if (!$photo) {
      // Get last photo instead
      $select = $table->select()
              ->where('album_id = ?', $album_id)
              ->order('order DESC')
              ->limit(1);
      $photo = $table->fetchRow($select);
    }
    return $photo;
  }
	public function allowReviewRating(){
		if(Engine_Api::_()->getDbtable('modules', 'core')->isModuleEnabled('seseventreview') && Engine_Api::_()->getApi('settings', 'core')->getSetting('seseventreview.allow.review', 1)){
		 	return true;
		}
		return false;
	}
}
